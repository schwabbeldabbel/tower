
startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 3,
    "backwardDepth": 3,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 7,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.example.towerdef.controller.GameViewController",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1322970774 { 
   	label=example
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1180970080 { 
   	label=towerdef
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   subgraph cluster_1466151909 { 
   	label=model
	labeljust=l
	fillcolor="#c4c4c4"
	style=filled
   
   subgraph cluster_1348453529 { 
   	label=gamelogic
	labeljust=l
	fillcolor="#bababa"
	style=filled
   
   subgraph cluster_1867596030 { 
   	label=time
	labeljust=l
	fillcolor="#b0b0b0"
	style=filled
   
   TimerThread891536299[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)TimerThread</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   gameViewController: GameViewController [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   running: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   speed: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   thread: Thread [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   time: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ run()</TD></TR>
<TR><TD ALIGN="LEFT" >+ start()</TD></TR>
<TR><TD ALIGN="LEFT" >+ stop()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

subgraph cluster_972895645 { 
   	label=data
	labeljust=l
	fillcolor="#bababa"
	style=filled
   
   subgraph cluster_1527638131 { 
   	label=weapon
	labeljust=l
	fillcolor="#b0b0b0"
	style=filled
   
   Weapon947465446[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Weapon</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   attackSpeed: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   bulletType: BulletType [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   damage: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ shoot(): Bullet</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

subgraph cluster_1238404342 { 
   	label=fxmlelement
	labeljust=l
	fillcolor="#a6a6a6"
	style=filled
   
   Bullet1364311273[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Bullet</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   bulletType: BulletType [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   running: boolean [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

subgraph cluster_2015566236 { 
   	label=human
	labeljust=l
	fillcolor="#b0b0b0"
	style=filled
   
   HumanUnit1064450159[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)HumanUnit</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   alive: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   armor: float [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   healing: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   health: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: HumanUnitName [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   position: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   weapon: Weapon [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ die()</TD></TR>
<TR><TD ALIGN="LEFT" >+ heal()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hit(damage: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ shoot(): Bullet</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 

subgraph cluster_2026479480 { 
   	label=tower
	labeljust=l
	fillcolor="#b0b0b0"
	style=filled
   
   Tower1075363403[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Tower</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   alive: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   health: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   weapon: Weapon [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ die()</TD></TR>
<TR><TD ALIGN="LEFT" >+ heal()</TD></TR>
<TR><TD ALIGN="LEFT" >+ hit(damage: int): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ shoot(): Bullet</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 
} 

subgraph cluster_448996886 { 
   	label=controller
	labeljust=l
	fillcolor="#c4c4c4"
	style=filled
   
   GameViewController582243069[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GameViewController</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   activeBulletsTimeline: Map&lt;Bullet, Timeline&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   collidingNodes: List&lt;Node&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   humanPos1: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   humanPos2: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   humanPos3: Button [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   humans: List&lt;HumanUnit&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   positionHittable: Map&lt;Node, Hittable&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   positionTarget: Map&lt;Node, Point2D&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   root: GridPane [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   selectedHumanPos: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   timer: Label [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   timerThread: TimerThread [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   tower: Tower [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   towerPos: Rectangle [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   winningLabel: Label [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- addBullet(bullet: Bullet, startPosition: int, target: Node, damage: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- checkShooting(milliSeconds: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- checkWinning()</TD></TR>
<TR><TD ALIGN="LEFT" >- hit(target: Node, damage: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- humansWin()</TD></TR>
<TR><TD ALIGN="LEFT" >+ initialize()</TD></TR>
<TR><TD ALIGN="LEFT" >- initializeStartPosition(bullet: Bullet, startPosition: int, path: Path)</TD></TR>
<TR><TD ALIGN="LEFT" >- initializeTravelPath(bullet: Bullet, target: Point2D, path: Path, pathTransition: PathTransition)</TD></TR>
<TR><TD ALIGN="LEFT" >- isColliding(bullet: Node, target: Node): boolean</TD></TR>
<TR><TD ALIGN="LEFT" >+ notify(milliSeconds: int)</TD></TR>
<TR><TD ALIGN="LEFT" >- placeHumans()</TD></TR>
<TR><TD ALIGN="LEFT" >- setUpCollisionDetection(bullet: Bullet, target: Node, damage: int): Timeline</TD></TR>
<TR><TD ALIGN="LEFT" >- startTimer()</TD></TR>
<TR><TD ALIGN="LEFT" >- towerWin()</TD></TR>
<TR><TD ALIGN="LEFT" >- updateSelectedTarget()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 
} 

'edges    
GameViewController582243069 -> Bullet1364311273[label="activeBulletsTimeline
[0..*]"];
GameViewController582243069 -> HumanUnit1064450159[arrowhead=none];
GameViewController582243069 -> TimerThread891536299[label="timerThread
[0..1]"];
GameViewController582243069 -> Tower1075363403[arrowhead=none];
HumanUnit1064450159 -> Weapon947465446[label="weapon
[0..1]"];
TimerThread891536299 -> GameViewController582243069[label="gameViewController
[0..1]"];
Tower1075363403 -> Weapon947465446[label="weapon
[0..1]"];
    
}
@enduml